'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
function _nullishCoalesce(lhs, rhsFn) {
  if (lhs != null) {
    return lhs;
  } else {
    return rhsFn();
  }
}
function _optionalChain(ops) {
  let lastAccessLHS = undefined;
  let value = ops[0];
  let i = 1;
  while (i < ops.length) {
    const op = ops[i];
    const fn = ops[i + 1];
    i += 2;
    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {
      return undefined;
    }
    if (op === 'access' || op === 'optionalAccess') {
      lastAccessLHS = value;
      value = fn(value);
    } else if (op === 'call' || op === 'optionalCall') {
      value = fn((...args) => value.call(lastAccessLHS, ...args));
      lastAccessLHS = undefined;
    }
  }
  return value;
}
var _lrucache = require('lru-cache');
function c(i) {
  let a = new (0, _lrucache.LRUCache)({
    max: _optionalChain([i, 'optionalAccess', (_) => _.uniqueTokenPerInterval]) || 500,
    ttl: _optionalChain([i, 'optionalAccess', (_2) => _2.interval]) || 6e4
  });
  return {
    checkNext: (e, n) => {
      let r = new Headers(),
        o =
          e.ip ||
          e.headers.get('x-forwarded-for') ||
          e.headers.get('x-real-ip') ||
          e.headers.get('x-client-ip') ||
          '127.0.0.1',
        t = a.get(o) || [0];
      t[0] === 0 && a.set(o, t), (t[0] += 1);
      let s = _nullishCoalesce(t[0], () => 0),
        u = s >= n;
      if (
        (r.set('X-RateLimit-Limit', n.toString()),
        r.set('X-RateLimit-Remaining', u ? '0' : (n - s).toString()),
        u)
      )
        throw new Error('Rate limit exceeded');
      return r;
    }
  };
}
exports.default = c;
//# sourceMappingURL=index.js.map
