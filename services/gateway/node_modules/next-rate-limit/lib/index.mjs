import { LRUCache as m } from 'lru-cache';
function c(i) {
  let a = new m({ max: i?.uniqueTokenPerInterval || 500, ttl: i?.interval || 6e4 });
  return {
    checkNext: (e, n) => {
      let r = new Headers(),
        o =
          e.ip ||
          e.headers.get('x-forwarded-for') ||
          e.headers.get('x-real-ip') ||
          e.headers.get('x-client-ip') ||
          '127.0.0.1',
        t = a.get(o) || [0];
      t[0] === 0 && a.set(o, t), (t[0] += 1);
      let s = t[0] ?? 0,
        u = s >= n;
      if (
        (r.set('X-RateLimit-Limit', n.toString()),
        r.set('X-RateLimit-Remaining', u ? '0' : (n - s).toString()),
        u)
      )
        throw new Error('Rate limit exceeded');
      return r;
    }
  };
}
export { c as default };
//# sourceMappingURL=index.mjs.map
